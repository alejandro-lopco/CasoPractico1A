pipeline {
    agent any
    stages {
        stage('Setup') {
            agent { node 'agente1' }  
            steps{
                bat '''
                    python -m pip install --upgrade pip
                    python -m pip install pytest
                    python -m pip install flask
                '''
            }
        }
        stage('serverSetup') {
            agent { node 'agente1' }  
            steps {
                powershell '''
                    Start-Process "java" -ArgumentList "-jar D:\\wiremock-standalone-3.10.0.jar --port 9090 --root-dir $env:WORKSPACE\\test\\wiremock"
                    Start-Sleep -Seconds 5
                    echo "Inicializado WireMock"
                    $env:FLASK_APP="app.api"
                    Start-Process "python" -ArgumentList "-m flask run"
                    Start-Sleep -Seconds 5
                    echo "Inicializado Flask"
                    '''
            }
        }
        stage('GetCode') {
            agent { node 'agente1' }
            steps {
                bat 'git clone https://github.com/alejandro-lopco/CasoPractico1A'
                stash includes: '**', name: 'repositorio'
            }
        }
        stage('unitTest') {
            agent { node 'agente2' }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    unstash 'repositorio'
                    bat '''
                        set PYTHONPATH=%WORKSPACE%\\CasoPractico1A
                        python -m pytest --junitxml=result-unit.xml CasoPractico1A\\test\\unit
                    '''
                }  
                
            }
        }
        stage('restTest') {
            agent { node 'agente2' }
            steps {
                unstash 'repositorio'
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    bat '''
                        set PYTHONPATH=%WORKSPACE%\\CasoPractico1A
                        python -m pytest --junitxml=result-rest.xml CasoPractico1A\\test\\rest
                        '''
                }
            }
        }                
        stage('Resultados') {
            agent { node 'agente2' }
            steps {
                junit 'result*.xml'
            }
        }
    }
}
